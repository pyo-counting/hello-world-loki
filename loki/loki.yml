# A comma-separated list of components to run.
# The default value "all" runs Loki in single binary mode.
# The value "read" is an alias to run only read-path related components such as
# the querier and query-frontend, but all in the same process.
# The value "write" is an alias to run only write-path related components such as
# the distributor and compactor, but all in the same process.
# Supported values: all, compactor, distributor, ingester, querier, query-scheduler,
#  ingester-querier, query-frontend, index-gateway, ruler, table-manager, read, write.
# A full list of available targets can be printed when running Loki with the `-list-targets` command line flag.
target: "${TARGET}"

# Enables authentication through the X-Scope-OrgID header, which must be present
# if true. If false, the OrgID will always be set to "fake".
auth_enabled: true

# The amount of virtual memory in bytes to reserve as ballast in order to optimize
# garbage collection. Larger ballasts result in fewer garbage collection passes, reducing CPU overhead at
# the cost of heap size. The ballast will not consume physical memory, because it is never read from.
# It will, however, distort metrics, because it is counted as live memory.
#[ballast_bytes: <int> | default = 0]

# Configures the server of the launched module(s).
server:
  # HTTP server listen host
  # CLI flag: -server.http-listen-address
  http_listen_address:
  
  # HTTP server listen port
  # CLI flag: -server.http-listen-port
  http_listen_port: ${http_listen_port}
  
  # gRPC server listen host
  # CLI flag: -server.grpc-listen-address
  grpc_listen_address: 
  
  # gRPC server listen port
  # CLI flag: -server.grpc-listen-port
  grpc_listen_port: 9095
  
  # Register instrumentation handlers (/metrics, etc.)
  # CLI flag: -server.register-instrumentation
  register_instrumentation: true
  
  # Timeout for graceful shutdowns
  # CLI flag: -server.graceful-shutdown-timeout
  graceful_shutdown_timeout: 30s
  
  # Read timeout for HTTP server
  # CLI flag: -server.http-read-timeout
  http_server_read_timeout: 30s
  
  # Write timeout for HTTP server
  # CLI flag: -server.http-write-timeout
  http_server_write_timeout: 30s
  
  # Idle timeout for HTTP server
  # CLI flag: -server.http-idle-timeout
  http_server_idle_timeout: 120s
  
  # Max gRPC message size that can be received
  # CLI flag: -server.grpc-max-recv-msg-size-bytes
  grpc_server_max_recv_msg_size: 4194304
  
  # Max gRPC message size that can be sent
  # CLI flag: -server.grpc-max-recv-msg-size-bytes
  grpc_server_max_send_msg_size: 4194304
  
  # Limit on the number of concurrent streams for gRPC calls (0 = unlimited)
  # CLI flag: -server.grpc-max-concurrent-streams
  grpc_server_max_concurrent_streams: 100
  
  # Log only messages with the given severity or above. Supported values [debug,
  # info, warn, error]
  # CLI flag: -log.level
  log_level: ${log_level}
  
  # Base path to serve all API routes from (e.g., /v1/).
  # CLI flag: -server.path-prefix
  #[http_path_prefix: <string> | default = ""]
  
# Common configuration to be shared between multiple modules.
# If a more specific configuration is given in other sections,
# the related configuration within this section will be ignored.
common:
  # A common storage configuration to be used by the different Loki components.
  #storage:
    # The `hedging_config` configures how to hedge requests for the storage.
    #hedging:
      # An optional duration that sets the quantity of time after a first storage request
      # is sent and before a second request is sent, when no response is received for the first
      # storage request. The recommended duration is the measured 99th percentile of object
      # storage response times, to reduce long tail latency. This option is most impactful
      # when used with queriers, and has minimal to no impact on other components.
      # The default value of 0 disables the hedging of storage requests.
      # Example: "at: 500ms"
      #[at: <duration> | default = 0]
      
      # An optional maximum quantity of hedged requests to be issued for a given request.
      #[up_to: <int> | default = 2]
      
      # Caps the rate of hedged requests by optionally defining the maximum quantity of
      # hedged requests issued per second.
      #[max_per_second: <int> | default = 5]
      
  # When defined, the given prefix will be present in front of the endpoint paths.
  #[path_prefix: <string>]
  
  # How many times incoming data should be replicated to the ingester component.
  replication_factor: ${replication_factor}
  
  # When true, the ingester, compactor, and query_scheduler ring tokens will be saved
  # to files in the path_prefix directory. Loki will error if you set this to true
  # and path_prefix is empty.
  persist_tokens: false
  
  # A common list of net interfaces used internally to look for addresses.
  # If a more specific "instance_interface_names" is set, this is ignored.
  # If "instance_interface_names" under the common ring section is configured,
  # this common "instance_interface_names" is only applied to the frontend, but not for
  # ring related components (ex: distributor, ruler, etc).
  instance_interface_names: [eth1]
  
  # A common address used by Loki components to advertise their address.
  # If a more specific "instance_addr" is set, this is ignored.
  # If "instance_addr" under the common ring section is configured, this common "instance_addr"
  # is only applied to the frontend, but not for ring related components (ex: distributor, ruler, etc).
  #[instance_addr: <string>]
  
  # A common ring configuration to be used by all Loki rings.
  # If a common ring is given, its values are used to define any undefined ring values.
  # For instance, you can expect the `heartbeat_period` defined in the common section
  # to be used by the distributor's ring, but only if the distributor's ring itself
  # doesn't have a `heartbeat_period` set.
  ring:
    # The key-value store used to share the hash ring across multiple instances.
    kvstore:
      # Backend storage to use for the ring. Supported values are: consul, etcd,
      # inmemory, memberlist, multi.
      # CLI flag: -<prefix>.store
      store: "consul"
    
      # The prefix for the keys in the store. Should end with a /.
      # CLI flag: -<prefix>.prefix
      prefix: "collectors/loki/"
      
      # The consul_config configures the consul client.
      consul:
        # The hostname and port of Consul.
        # CLI flag: -<prefix>.consul.hostname
        host: ${host}
        
        # The ACL Token used to interact with Consul.
        # CLI flag: -<prefix>.consul.acl-token
        #[acl_token: <string>]
        
        # The HTTP timeout when communicating with Consul
        # CLI flag: -<prefix>.consul.client-timeout
        http_client_timeout: 20s
        
        # Whether or not consistent reads to Consul are enabled.
        # CLI flag: -<prefix>.consul.consistent-reads
        consistent_reads: true
      
    # Interval between heartbeats sent to the ring. 0 = disabled.
    # CLI flag: -<prefix>.heartbeat-period
    heartbeat_period: 15s
    
    # The heartbeat timeout after which store gateways are considered unhealthy
    # within the ring. 0 = never (timeout disabled). This option needs be set both
    # on the store-gateway and querier when running in microservices mode.
    # CLI flag: -<prefix>.heartbeat-timeout
    heartbeat_timeout: 20s
    
    # File path where tokens are stored. If empty, tokens are neither stored at
    # shutdown nor restored at startup.
    # CLI flag: -<prefix>.tokens-file-path
    #[tokens_file_path: <string> | default = ""]
    
    # True to enable zone-awareness and replicate blocks across different
    # availability zones.
    # CLI flag: -<prefix>.zone-awareness-enabled
    #[zone_awareness_enabled: <boolean> | default = false]
    
    # Name of network interface to read addresses from.
    # CLI flag: -<prefix>.instance-interface-names
    instance_interface_names: [eth1]
    
    # IP address to advertise in the ring.
    # CLI flag: -<prefix>.instance-addr
    #[instance_addr: <list of string> | default = first from instance_interface_names]
    
    # Port to advertise in the ring
    # CLI flag: -<prefix>.instance-port
    #[instance_port: <list of string> | default = server.grpc-listen-port]
    
    # Instance ID to register in the ring.
    # CLI flag: -<prefix>.instance-id
    #[instance_id: <list of string> | default = os.Hostname()]
    
    # The availability zone where this instance is running. Required if
    # zone-awareness is enabled.
    # CLI flag: -<prefix>.instance-availability-zone
    #[instance_availability_zone: <string> | default = ""]
    
# Configures the distributor.
distributor:
  # Configures the distributors ring, used when the "global" ingestion rate
  # strategy is enabled.
  ring:
    kvstore:
      # The backend storage to use for the ring. Supported values are
      # consul, etcd, inmemory, memberlist
      # CLI flag: -distributor.ring.store
      store: "consul"
  
      # The prefix for the keys in the store. Should end with a /.
      # CLI flag: -distributor.ring.prefix
      #[prefix: <string> | default = "collectors/"]
      
    # The heartbeat timeout after which ingesters are skipped for
    # reading and writing.
    # CLI flag: -distributor.ring.heartbeat-timeout
    #[heartbeat_timeout: <duration> | default = 1m]
    
# Configures the querier. Only appropriate when running all modules or
# just the querier.
querier:
  # Timeout when querying ingesters or storage during the execution of a query request.
  # CLI flag: -querier.query-timeout
  query_timeout: 1m
  
  # Maximum duration for which the live tailing requests should be served.
  # CLI flag: -querier.tail-max-duration
  tail_max_duration: 1h
  
  # Time to wait before sending more than the minimum successful query requests.
  # CLI flag: -querier.extra-query-delay
  extra_query_delay: 0s
  
  # Maximum lookback beyond which queries are not sent to ingester.
  # 0 means all queries are sent to ingester.
  # CLI flag: -querier.query-ingesters-within
  query_ingesters_within: 3h
  
  # The maximum number of concurrent queries allowed.
  # CLI flag: -querier.max-concurrent
  max_concurrent: 10
  
  # Only query the store, do not attempt to query any ingesters,
  # useful for running a standalone querier pool opearting only against stored data.
  # CLI flag: -querier.query-store-only
  query_store_only: false
  
  # Allow queries for multiple tenants.
  # CLI flag: -querier.multi-tenant-queries-enabled
  multi_tenant_queries_enabled: false
  
  # Configuration options for the LogQL engine.
  engine:
    # Timeout for query execution
    # CLI flag: -querier.engine.timeout
    timeout: 3m
    
    # The maximum amount of time to look back for log lines. Only
    # applicable for instant log queries.
    # CLI flag: -querier.engine.max-lookback-period
    max_look_back_period: 30s
    
# The query_scheduler block configures the Loki query scheduler.
# When configured it separates the tenant query queues from the query-frontend
query_scheduler:
  # Maximum number of outstanding requests per tenant per query-scheduler.
  # In-flight requests above this limit will fail with HTTP response status code
  # 429.
  # CLI flag: -query-scheduler.max-outstanding-requests-per-tenant
  max_outstanding_requests_per_tenant: 100
  
  # This configures the gRPC client used to report errors back to the
  # query-frontend.
  grpc_client_config:
    # The maximum size in bytes the client can receive.
    # CLI flag: -<prefix>.grpc-max-recv-msg-size
    max_recv_msg_size: 104857600
    
    # The maximum size in bytes the client can send.
    # CLI flag: -<prefix>.grpc-max-send-msg-size
    max_send_msg_size: 16777216
    
    # Use compression when sending messages. Supported values are: 'gzip', 'snappy',
    # and '' (disable compression).
    # CLI flag: -<prefix>.grpc-compression
    grpc_compression: ''
    
    # Rate limit for gRPC client. 0 is disabled.
    # CLI flag: -<prefix>.grpc-client-rate-limit
    rate_limit: 0
    
    # Rate limit burst for gRPC client.
    # CLI flag: -<prefix>.grpc-client-rate-limit-burst
    rate_limit_burst: 0
    
    # Enable backoff and retry when a rate limit is hit.
    # CLI flag: -<prefix>.backoff-on-ratelimits
    backoff_on_ratelimits: false
    
    # Configures backoff when enabled.
    #backoff_config:
      # Minimum delay when backing off.
      # CLI flag: -<prefix>.backoff-min-period
      #[min_period: <duration> | default = 100ms]
    
      # The maximum delay when backing off.
      # CLI flag: -<prefix>.backoff-max-period
      #[max_period: <duration> | default = 10s]
    
      # Number of times to backoff and retry before failing.
      # CLI flag: -<prefix>.backoff-retries
      #[max_retries: <int> | default = 10]
  
  # Set to true to have the query schedulers create and place themselves in a ring.
  # If no frontend_address or scheduler_address are present
  # anywhere else in the configuration, Loki will toggle this value to true.
  #[use_scheduler_ring: <boolean> | default = false]
  
  # The hash ring configuration. This option is required only if use_scheduler_ring is true
  # The CLI flags prefix for this block config is scheduler.ring
  #[scheduler_ring: <ring>]

# The frontend block configures the Loki query-frontend.
frontend:
  # Maximum number of outstanding requests per tenant per frontend; requests
  # beyond this error with HTTP 429.
  # CLI flag: -querier.max-outstanding-requests-per-tenant
  max_outstanding_per_tenant: 2048
  
  # In the event a tenant is repeatedly sending queries that lead the querier to crash
  # or be killed due to an out-of-memory error, the crashed querier will be disconnected
  # from the query frontend and a new querier will be immediately assigned to the tenant’s shard.
  # This invalidates the assumption that shuffle sharding can be used to reduce the
  # impact on tenants. This option mitigates the impact by configuring a delay between when
  # a querier disconnects because of a crash and when the crashed querier is actually removed
  # from the tenant's shard.
  # CLI flag: -query-frontend.querier-forget-delay
  #[querier_forget_delay: <duration> | default = 0s]
  
  # Compress HTTP responses.
  # CLI flag: -querier.compress-http-responses
  compress_responses: true
  
  # URL of downstream Loki.
  # CLI flag: -frontend.downstream-url
  #[downstream_url: <string> | default = ""]
  
  # Log queries that are slower than the specified duration. Set to 0 to disable.
  # Set to < 0 to enable on all queries.
  # CLI flag: -frontend.log-queries-longer-than
  log_queries_longer_than: 0s
  
  # URL of querier for tail proxy.
  # CLI flag: -frontend.tail-proxy-url
  #[tail_proxy_url: <string> | default = ""]
  
  # DNS hostname used for finding query-schedulers.
  # CLI flag: -frontend.scheduler-address
  scheduler_address: ${scheduler_address}
  
  # How often to resolve the scheduler-address, in order to look for new
  # query-scheduler instances.
  # Also used to determine how often to poll the scheduler-ring for addresses if configured.
  # CLI flag: -frontend.scheduler-dns-lookup-period
  scheduler_dns_lookup_period: 10s
  
  # Number of concurrent workers forwarding queries to single query-scheduler.
  # CLI flag: -frontend.scheduler-worker-concurrency
  scheduler_worker_concurrency: 5
  
# The frontend_worker configures the worker - running within the Loki
# querier - picking up and executing queries enqueued by the query-frontend.
frontend_worker:
  # Address of query frontend service, in host:port format.
  # CLI flag: -querier.frontend-address
  #[frontend_address: <string> | default = ""]
  
  # Number of simultaneous queries to process.
  # CLI flag: -querier.worker-parallelism
  #[parallelism: <int> | default = 10]
  
  # Force worker concurrency to match the -querier.max-concurrent option. Overrides querier.worker-parallelism.
  # CLI flag: -querier.worker-match-max-concurrent
  match_max_concurrent: true
  
  # How often to query the frontend_address DNS to resolve frontend addresses.
  # Also used to determine how often to poll the scheduler-ring for addresses if configured.
  # CLI flag: -querier.dns-lookup-period
  dns_lookup_duration: 3s
  
  # The CLI flags prefix for this block config is: querier.frontend-client
  grpc_client_config:
    # The maximum size in bytes the client can receive.
    # CLI flag: -<prefix>.grpc-max-recv-msg-size
    max_recv_msg_size: 104857600
    
    # The maximum size in bytes the client can send.
    # CLI flag: -<prefix>.grpc-max-send-msg-size
    max_send_msg_size: 16777216
    
    # Use compression when sending messages. Supported values are: 'gzip', 'snappy',
    # and '' (disable compression).
    # CLI flag: -<prefix>.grpc-compression
    grpc_compression: ''
    
    # Rate limit for gRPC client. 0 is disabled.
    # CLI flag: -<prefix>.grpc-client-rate-limit
    rate_limit: 0
    
    # Rate limit burst for gRPC client.
    # CLI flag: -<prefix>.grpc-client-rate-limit-burst
    rate_limit_burst: 0
    
    # Enable backoff and retry when a rate limit is hit.
    # CLI flag: -<prefix>.backoff-on-ratelimits
    backoff_on_ratelimits: false
    
    # Configures backoff when enabled.
    #backoff_config:
      # Minimum delay when backing off.
      # CLI flag: -<prefix>.backoff-min-period
      #[min_period: <duration> | default = 100ms]
    
      # The maximum delay when backing off.
      # CLI flag: -<prefix>.backoff-max-period
      #[max_period: <duration> | default = 10s]
    
      # Number of times to backoff and retry before failing.
      # CLI flag: -<prefix>.backoff-retries
      #[max_retries: <int> | default = 10]
  
  # DNS hostname used for finding query-schedulers.
  # CLI flag: -querier.scheduler-address
  scheduler_address: ${scheduler_address}
  
# The query_range block configures the query splitting and caching in the Loki
# query-frontend.
query_range:
  # Deprecated: Split queries by day and execute in parallel.
  # Use -querier.split-queries-by-interval instead.
  # CLI flag: -querier.split-queries-by-day
  #[split_queries_by_day: <boolean> | default = false]
  
  # Mutate incoming queries to align their start and end with their step.
  # CLI flag: -querier.align-querier-with-step
  align_queries_with_step: false
  
  results_cache:
    # The CLI flags prefix for this block config is: frontend
    cache:
      # Enable in-memory cache.
      # CLI flag: -<prefix>.cache.enable-fifocache
      enable_fifocache: true
      
      # The default validity of entries for caches unless overridden.
      # NOTE In Loki versions older than 1.4.0 this was "defaul_validity".
      # CLI flag: -<prefix>.default-validity
      #[default_validity: <duration>]
      
      fifocache:
        # Maximum memory size of the cache in bytes. A unit suffix (KB, MB, GB) may be
        # applied.
        # CLI flag: -<prefix>.fifocache.max-size-bytes
        max_size_bytes: "200MB"
      
        # Maximum number of entries in the cache.
        # CLI flag: -<prefix>.fifocache.max-size-items
        max_size_items: 0
      
        # Deprecated: The expiry duration for the cache. Use `-<prefix>.fifocache.ttl`.
        # The default value of 0 disables expiration.
        # CLI flag: -<prefix>.fifocache.duration
        #[validity: <duration>]
      
        # The time for items to live in the cache before those items are purged.
        # The value of 0 disables auto-expiration.
        # CLI flag: -<prefix>.fifocache.ttl
        ttl: 1h
      
  # Cache query results.
  # CLI flag: -querier.cache-results
  cache_results: true
  
  # Maximum number of retries for a single request; beyond this, the downstream
  # error is returned.
  # CLI flag: -querier.max-retries-per-request
  max_retries: 5
  
  # Perform query parallelisations based on storage sharding configuration and
  # query ASTs. This feature is supported only by the chunks storage engine.
  # CLI flag: -querier.parallelise-shardable-queries
  parallelise_shardable_queries: true
  
# The ruler block configures the Loki ruler.
#[ruler: <ruler>]

# The ingester_client block configures how the distributor will connect
# to ingesters. Only appropriate when running all components, the distributor,
# or the querier.
ingester_client:
  # Configures how connections are pooled
  pool_config:
    # Whether or not to do health checks.
    # CLI flag: -distributor.health-check-ingesters
    health_check_ingesters: true
  
    # How frequently to clean up clients for servers that have gone away after
    # a health check.
    # CLI flag: -distributor.client-cleanup-period
    client_cleanup_period: 15s
  
    # How quickly a dead client will be removed after it has been detected
    # to disappear. Set this to a value to allow time for a secondary
    # health check to recover the missing client.
    # CLI flag: -ingester.client.healthcheck-timeout
    remote_timeout: 1s
  
  # The remote request timeout on the client side.
  # CLI flag: -ingester.client.timeout
  remote_timeout: 5s
  
  # Configures how the gRPC connection to ingesters work as a client
  # The CLI flags prefix for this block config is: ingester.client
  grpc_client_config:
    # The maximum size in bytes the client can receive.
    # CLI flag: -<prefix>.grpc-max-recv-msg-size
    max_recv_msg_size: 104857600
    
    # The maximum size in bytes the client can send.
    # CLI flag: -<prefix>.grpc-max-send-msg-size
    max_send_msg_size: 16777216
    
    # Use compression when sending messages. Supported values are: 'gzip', 'snappy',
    # and '' (disable compression).
    # CLI flag: -<prefix>.grpc-compression
    grpc_compression: ''
    
    # Rate limit for gRPC client. 0 is disabled.
    # CLI flag: -<prefix>.grpc-client-rate-limit
    rate_limit: 0
    
    # Rate limit burst for gRPC client.
    # CLI flag: -<prefix>.grpc-client-rate-limit-burst
    rate_limit_burst: 0
    
    # Enable backoff and retry when a rate limit is hit.
    # CLI flag: -<prefix>.backoff-on-ratelimits
    backoff_on_ratelimits: false
    
    # Configures backoff when enabled.
    #backoff_config:
      # Minimum delay when backing off.
      # CLI flag: -<prefix>.backoff-min-period
      #[min_period: <duration> | default = 100ms]
    
      # The maximum delay when backing off.
      # CLI flag: -<prefix>.backoff-max-period
      #[max_period: <duration> | default = 10s]
    
      # Number of times to backoff and retry before failing.
      # CLI flag: -<prefix>.backoff-retries
      #[max_retries: <int> | default = 10]
  
# The ingester block configures the ingester and how the ingester will register itself to a
# key value store.
ingester:
  # Configures how the lifecycle of the ingester will operate
  # and where it will register for discovery.
  lifecycler:
    #ring:
      #kvstore:
        # Backend storage to use for the ring. Supported values are: consul, etcd,
        # inmemory, memberlist
        # CLI flag: -ring.store
        #[store: "<string> | default = "consul"]"
  
        # The prefix for the keys in the store. Should end with a /.
        # CLI flag: -ring.prefix
        #[prefix: <string> | default = "collectors/"]
        
      # The heartbeat timeout after which ingesters are skipped for reads/writes.
      # CLI flag: -ring.heartbeat-timeout
      #[heartbeat_timeout: <duration> | default = 1m]
  
      # The number of ingesters to write to and read from.
      # CLI flag: -distributor.replication-factor
      #[replication_factor: <int> | default = 3]
  
    # The number of tokens the lifecycler will generate and put into the ring if
    # it joined without transferring tokens from another lifecycler.
    # CLI flag: -ingester.num-tokens
    num_tokens: 128
    
    # Period at which to heartbeat to the underlying ring.
    # CLI flag: -ingester.heartbeat-period
    #[heartbeat_period: <duration> | default = 5s]
  
    # How long to wait to claim tokens and chunks from another member when
    # that member is leaving. Will join automatically after the duration expires.
    # CLI flag: -ingester.join-after
    join_after: 0s
    
    # Observe tokens after generating to resolve collisions. Useful when using a gossip ring.
    # CLI flag: -ingester.observe-period
    observe_period: 0s
    
    # Minimum duration to wait before becoming ready. This is to work around race
    # conditions with ingesters exiting and updating the ring.
    # CLI flag: -ingester.min-ready-duration
    min_ready_duration: 15s
    
    # Name of network interfaces to read addresses from.
    # CLI flag: -ingester.lifecycler.interface
    interface_names: [eth0]
    
    # Duration to sleep before exiting to ensure metrics are scraped.
    # CLI flag: -ingester.final-sleep
    final_sleep: 30s
  
  # Number of times to try and transfer chunks when leaving before
  # falling back to flushing to the store. Zero = no transfers are done.
  # CLI flag: -ingester.max-transfer-retries
  max_transfer_retries: 0
  
  # How many flushes can happen concurrently from each stream.
  # CLI flag: -ingester.concurrent-flushes
  concurrent_flushes: 32
  
  # How often should the ingester see if there are any blocks to flush
  # CLI flag: -ingester.flush-check-period
  flush_check_period: 30s
  
  # The timeout before a flush is cancelled
  # CLI flag: -ingester.flush-op-timeout
  flush_op_timeout: 10m
  
  # How long chunks should be retained in-memory after they've been flushed.
  # CLI flag: -ingester.chunks-retain-period
  chunk_retain_period: 0s
  
  # How long chunks should sit in-memory with no updates before
  # being flushed if they don't hit the max block size. This means
  # that half-empty chunks will still be flushed after a certain
  # period as long as they receive no further activity.
  # CLI flag: -ingester.chunks-idle-period
  chunk_idle_period: 2h
  
  # The targeted _uncompressed_ size in bytes of a chunk block
  # When this threshold is exceeded the head block will be cut and compressed inside the chunk.
  # CLI flag: -ingester.chunks-block-size
  chunk_block_size: 262144
  
  # A target _compressed_ size in bytes for chunks.
  # This is a desired size not an exact size, chunks may be slightly bigger
  # or significantly smaller if they get flushed for other reasons (e.g. chunk_idle_period)
  # A value of 0 creates chunks with a fixed 10 blocks,
  # A non zero value will create chunks with a variable number of blocks to meet the target size.
  # CLI flag: -ingester.chunk-target-size
  chunk_target_size: 1572864
  
  # The compression algorithm to use for chunks. (supported: gzip, lz4, snappy)
  # You should choose your algorithm depending on your need:
  # - `gzip` highest compression ratio but also slowest decompression speed. (144 kB per chunk)
  # - `lz4` fastest compression speed (188 kB per chunk)
  # - `snappy` fast and popular compression algorithm (272 kB per chunk)
  # CLI flag: -ingester.chunk-encoding
  chunk_encoding: gzip
  
  # Parameters used to synchronize ingesters to cut chunks at the same moment.
  # Sync period is used to roll over incoming entry to a new chunk. If chunk's utilization
  # isn't high enough (eg. less than 50% when sync_min_utilization is set to 0.5), then
  # this chunk rollover doesn't happen.
  # CLI flag: -ingester.sync-period
  #[sync_period: <duration> | default = 0]
  
  # CLI flag: -ingester.sync-min-utilization
  #[sync_min_utilization: <float> | Default = 0]
  
  # The maximum number of errors a stream will report to the user
  # when a push fails. 0 to make unlimited.
  # CLI flag: -ingester.max-ignored-stream-errors
  max_returned_stream_errors: 10
  
  # The maximum duration of a timeseries chunk in memory. If a timeseries runs for longer than this,
  # the current chunk will be flushed to the store and a new chunk created.
  # CLI flag: -ingester.max-chunk-age
  max_chunk_age: 2h
  
  # How far in the past an ingester is allowed to query the store for data.
  # This is only useful for running multiple Loki binaries with a shared ring
  # with a `filesystem` store, which is NOT shared between the binaries.
  # When using any "shared" object store like S3 or GCS, this value must always be left as 0.
  # It is an error to configure this to a non-zero value when using any object store other
  # than `filesystem`.
  # Use a value of -1 to allow the ingester to query the store infinitely far back in time.
  # CLI flag: -ingester.query-store-max-look-back-period
  #[query_store_max_look_back_period: <duration> | default = 0]
  
  # Forget about ingesters having heartbeat timestamps older than `ring.kvstore.heartbeat_timeout`.
  # This is equivalent to clicking on the `/ring` `forget` button in the UI:
  # the ingester is removed from the ring.
  # This is a useful setting when you are sure that an unhealthy node won't return.
  # An example is when not using stateful sets or the equivalent.
  # Use `memberlist.rejoin_interval` > 0 to handle network partition cases when using a memberlist.
  # CLI flag: -ingester.autoforget-unhealthy
  autoforget_unhealthy: true
  
  # The ingester WAL (Write Ahead Log) records incoming logs and stores them on
  # the local file systems in order to guarantee persistence of acknowledged data
  # in the event of a process crash.
  wal:
    # Enables writing to WAL.
    # CLI flag: -ingester.wal-enabled
    enabled: false
  
    # Directory where the WAL data should be stored and/or recovered from.
    # CLI flag: -ingester.wal-dir
    #[dir: <filename> | default = "wal"]
  
    # When WAL is enabled, should chunks be flushed to long-term storage on shutdown.
    # CLI flag: -ingester.flush-on-shutdown
    #[flush_on_shutdown: <boolean> | default = false]
  
    # Interval at which checkpoints should be created.
    # CLI flag: ingester.checkpoint-duration
    #[checkpoint_duration: <duration> | default = 5m]
  
    # Maximum memory size the WAL may use during replay. After hitting this,
    # it will flush data to storage before continuing.
    # A unit suffix (KB, MB, GB) may be applied.
    #[replay_memory_ceiling: <string> | default = 4GB]
    
  # Shard factor used in the ingesters for the in process reverse index.
  # This MUST be evenly divisible by ALL schema shard factors or Loki will not start.
  index_shards:  32
  
# Configures where Loki will store data.
storage_config:
  # Configures storing chunks and/or the index in Cassandra
  cassandra:
    # Comma-separated hostnames or IPs of Cassandra instances
    # CLI flag: -cassandra.addresses
    addresses: ${address}
  
    # Port that cassandra is running on
    # CLI flag: -cassandra.port
    port: ${port}
  
    # Keyspace to use in Cassandra
    # CLI flag: -cassandra.keyspace
    keyspace: "loki"
  
    # Consistency level for Cassandra
    # CLI flag: -cassandra.consistency
    consistency: "QUORUM"
  
    # Replication factor to use in Cassandra.
    # CLI flag: -cassandra.replication-factor
    replication_factor: 1
  
    # Instruct the Cassandra driver to not attempt to get host
    # info from the system.peers table.
    # CLI flag: -cassandra.disable-initial-host-lookup
    disable_initial_host_lookup: false
  
    # Use SSL when connecting to Cassandra instances.
    # CLI flag: -cassandra.ssl
    SSL: false
  
    # Require SSL certificate validation when SSL is enabled.
    # CLI flag: -cassandra.host-verification
    #[host_verification: <boolean> | default = true]
  
    # Path to certificate file to verify the peer when SSL is enabled.
    # CLI flag: -cassandra.ca-path
    #[CA_path: <string>]
  
    # Enable password authentication when connecting to Cassandra.
    # CLI flag: -cassandra.auth
    auth: false
  
    # Username for password authentication when auth is true.
    # CLI flag: -cassandra.username
    username: ""
  
    # Password for password authentication when auth is true.
    # CLI flag: -cassandra.password
    password: ""
  
    # Timeout when connecting to Cassandra.
    # CLI flag: -cassandra.timeout
    timeout: 600ms
  
    # Initial connection timeout during initial dial to server.
    # CLI flag: -cassandra.connect-timeout
    connect_timeout: 600ms
    
  # Cache validity for active index entries. Should be no higher than
  # the chunk_idle_period in the ingester settings.
  # CLI flag: -store.index-cache-validity
  index_cache_validity: 5m
  
  # The maximum number of chunks to fetch per batch.
  # CLI flag: -store.max-chunk-batch-size
  max_chunk_batch_size: 50
  
  # Config for how the cache for index queries should be built.
  # The CLI flags prefix for this block config is: store.index-cache-read
  #index_queries_cache_config: <cache_config>
  
# Configures how Loki will store data in the specific store.
#[chunk_store_config: <chunk_store_config>]

# Configures the chunk index schema and where it is stored.
schema_config:
  # The configuration for chunk index schemas.
  configs:
      # The date of the first day that index buckets should be created. Use
      # a date in the past if this is your only period_config, otherwise
      # use a date when you want the schema to switch over.
      # In YYYY-MM-DD format, for example: 2018-04-15.
    - from: "1993-07-29"
      
      # store and object_store below affect which <storage_config> key is
      # used.
      
      # Which store to use for the index. Either aws, aws-dynamo, gcp, bigtable, bigtable-hashed,
      # cassandra, boltdb or boltdb-shipper.
      store: cassandra
      
      # Which store to use for the chunks. Either aws, azure, gcp,
      # bigtable, gcs, cassandra, swift or filesystem. If omitted, defaults to the same
      # value as store.
      object_store: cassandra
      
      # The schema version to use, current recommended schema is v11.
      schema: v11
      
      # Configures how the index is updated and stored.
      index:
        # Table prefix for all period tables.
        prefix: loki_index_
        # Table period.
        period: 1w
        # A map to be added to all managed tables.
        #tags:
          #[<string>: <string> ...]
      
      # Configured how the chunks are updated and stored.
      chunks:
        # Table prefix for all period tables.
        prefix: loki_chunk_
        # Table period.
        period: 1w
        # A map to be added to all managed tables.
        #tags:
          #[<string>: <string> ...]
      
      # How many shards will be created. Only used if schema is v10 or greater.
      row_shards: 16
      
# The table_manager block configures the table manager for retention.
table_manager:
  # Master 'off-switch' for table capacity updates, e.g. when troubleshooting.
  # CLI flag: -table-manager.throughput-updates-disabled
  throughput_updates_disabled: false
  
  # Master 'on-switch' for table retention deletions.
  # CLI flag: -table-manager.retention-deletes-enabled
  retention_deletes_enabled: true
  
  # How far back tables will be kept before they are deleted. 0s disables
  # deletion. The retention period must be a multiple of the index / chunks
  # table "period" (see period_config).
  # CLI flag: -table-manager.retention-period
  retention_period: 4w
  
  # Period with which the table manager will poll for tables.
  # CLI flag: -table-manager.poll-interval
  poll_interval: 2m
  
  # Duration a table will be created before it is needed.
  # CLI flag: -table-manager.periodic-table.grace-period
  creation_grace_period: 20m
  
  # Configures management of the index tables for DynamoDB.
  # The CLI flags prefix for this block config is: table-manager.index-table
  #index_tables_provisioning: <provision_config>
  
  # Configures management of the chunk tables for DynamoDB.
  # The CLI flags prefix for this block config is: table-manager.chunk-table
  #chunk_tables_provisioning: <provision_config>
  
# The compactor block configures the compactor component which compacts index shards for performance.
#[compactor: <compactor>]

# Configures limits per-tenant or globally.
limits_config:
  # Whether the ingestion rate limit should be applied individually to each
  # distributor instance (local), or evenly shared across the cluster (global).
  # The ingestion rate strategy cannot be overridden on a per-tenant basis.
  #
  # - local: enforces the limit on a per distributor basis. The actual effective
  #   rate limit will be N times higher, where N is the number of distributor
  #   replicas.
  # - global: enforces the limit globally, configuring a per-distributor local
  #   rate limiter as "ingestion_rate / N", where N is the number of distributor
  #   replicas (it's automatically adjusted if the number of replicas change).
  #   The global strategy requires the distributors to form their own ring, which
  #   is used to keep track of the current number of healthy distributor replicas.
  # CLI flag: -distributor.ingestion-rate-limit-strategy
  ingestion_rate_strategy: "global"
  
  # Per-user ingestion rate limit in sample size per second. Units in MB.
  # CLI flag: -distributor.ingestion-rate-limit-mb
  ingestion_rate_mb: 4
  
  # Per-user allowed ingestion burst size (in sample size). Units in MB.
  # The burst size refers to the per-distributor local rate limiter even in the
  # case of the "global" strategy, and should be set at least to the maximum logs
  # size expected in a single push request.
  # CLI flag: -distributor.ingestion-burst-size-mb
  ingestion_burst_size_mb: 6
  
  # Maximum length of a label name.
  # CLI flag: -validation.max-length-label-name
  max_label_name_length: 1024
  
  # Maximum length of a label value.
  # CLI flag: -validation.max-length-label-value
  max_label_value_length: 2048
  
  # Maximum number of label names per series.
  # CLI flag: -validation.max-label-names-per-series
  max_label_names_per_series: 30
  
  # Whether or not old samples will be rejected.
  # CLI flag: -validation.reject-old-samples
  reject_old_samples: true
  
  # Maximum accepted sample age before rejecting.
  # CLI flag: -validation.reject-old-samples.max-age
  reject_old_samples_max_age: 168h
  
  # Duration for a table to be created/deleted before/after it's
  # needed. Samples won't be accepted before this time.
  # CLI flag: -validation.create-grace-period
  creation_grace_period: 20m
  
  # Enforce every sample has a metric name.
  # CLI flag: -validation.enforce-metric-name
  enforce_metric_name: true
  
  # Maximum line size on ingestion path. Example: 256kb.
  # There is no limit when unset or set to 0.
  # CLI flag: -distributor.max-line-size
  max_line_size: 0 
  
  # Truncate log lines when they exceed max_line_size.
  # CLI flag: -distributor.max-line-size-truncate
  max_line_size_truncate: false 
  
  # Maximum number of log entries that will be returned for a query.
  # CLI flag: -validation.max-entries-limit
  max_entries_limit_per_query: 5000 
  
  # Maximum number of active streams per user, per ingester. 0 to make it unlimited.
  # CLI flag: -ingester.max-streams-per-user
  max_streams_per_user: 0
  
  # Maximum number of active streams per user, across the cluster. 0 to disable.
  # When the global limit is enabled, each ingester is configured with a dynamic
  # local limit based on the replication factor and the current number of healthy
  # ingesters, and is kept updated whenever the number of ingesters change.
  # CLI flag: -ingester.max-global-streams-per-user
  max_global_streams_per_user: 5000
  
  # When true, out-of-order writes are accepted.
  # CLI flag: -ingester.unordered-writes
  unordered_writes: true
  
  # Maximum number of chunks that can be fetched by a single query.
  # CLI flag: -store.query-chunk-limit
  max_chunks_per_query: 2000000
  
  # The limit to length of chunk store queries. 0 to disable.
  # CLI flag: -store.max-query-length
  max_query_length: 721h
  
  # Maximum number of queries that will be scheduled in parallel by the frontend.
  # CLI flag: -querier.max-query-parallelism
  max_query_parallelism: 32
  
  # Limit the maximum of unique series that is returned by a metric query.
  # When the limit is reached an error is returned.
  # CLI flag: -querier.max-query-series
  max_query_series: 500
  
  # Cardinality limit for index queries.
  # CLI flag: -store.cardinality-limit
  cardinality_limit: 100000
  
  # Maximum number of stream matchers per query.
  # CLI flag: -querier.max-streams-matcher-per-query
  max_streams_matchers_per_query: 1000
  
  # Maximum number of concurrent tail requests.
  # CLI flag: -querier.max-concurrent-tail-requests
  max_concurrent_tail_requests: 10
  
  # Duration to delay the evaluation of rules to ensure.
  # CLI flag: -ruler.evaluation-delay-duration
  #[ruler_evaluation_delay_duration: <duration> | default = 0s]
  
  # Maximum number of rules per rule group per-tenant. 0 to disable.
  # CLI flag: -ruler.max-rules-per-rule-group
  #[ruler_max_rules_per_rule_group: <int> | default = 0]
  
  # Maximum number of rule groups per-tenant. 0 to disable.
  # CLI flag: -ruler.max-rule-groups-per-tenant
  #[ruler_max_rule_groups_per_tenant: <int> | default = 0]
  
  # Retention to apply for the store, if the retention is enable on the compactor side.
  # CLI flag: -store.retention
  #[retention_period: <duration> | default = 744h]
  
  # Per-stream retention to apply, if the retention is enable on the compactor side.
  # Example:
  # retention_stream:
  # - selector: '{namespace="dev"}'
  #   priority: 1
  #   period: 24h
  # - selector: '{container="nginx"}'
  #   priority: 1
  #   period: 744h
  # Selector is a Prometheus labels matchers that will apply the `period` retention only if
  # the stream is matching. In case multiple stream are matching, the highest
  # priority will be picked. If no rule is matched the `retention_period` is used.
  #[retention_stream: <array> | default = none]
  
  # Feature renamed to 'runtime configuration', flag deprecated in favor of -runtime-config.file
  # (runtime_config.file in YAML).
  # CLI flag: -limits.per-user-override-config
  #[per_tenant_override_config: <string>]
  
  # Feature renamed to 'runtime configuration'; flag deprecated in favor of
  # -runtime-config.reload-period (runtime_config.period in YAML).
  # CLI flag: -limits.per-user-override-period
  #per_tenant_override_period: 10s
  
  # Most recent allowed cacheable result per-tenant, to prevent caching very recent results that
  # might still be in flux.
  # CLI flag: -frontend.max-cache-freshness
  max_cache_freshness_per_query: 1m
  
  # Maximum number of queriers that can handle requests for a single tenant. If
  # set to 0 or value higher than number of available queriers, *all* queriers
  # will handle requests for the tenant. Each frontend (or query-scheduler, if
  # used) will select the same set of queriers for the same tenant (given that all
  # queriers are connected to all frontends / query-schedulers). This option only
  # works with queriers connecting to the query-frontend / query-scheduler, not
  # when using downstream URL.
  # CLI flag: -frontend.max-queriers-per-tenant
  max_queriers_per_tenant: 0
  
  # Maximum byte rate per second per stream,
  # also expressible in human readable forms (1MB, 256KB, etc).
  # CLI flag: -ingester.per-stream-rate-limit
  per_stream_rate_limit: "3MB"
  
  # Maximum burst bytes per stream,
  # also expressible in human readable forms (1MB, 256KB, etc).
  # This is how far above the rate limit a stream can "burst" before the stream is limited.
  # CLI flag: -ingester.per-stream-rate-limit-burst
  per_stream_rate_limit_burst: "15MB"
  
  # Limit how far back in time series data and metadata can be queried,
  # up until lookback duration ago.
  # This limit is enforced in the query frontend, the querier and the ruler.
  # If the requested time range is outside the allowed range, the request will not fail,
  # but will be modified to only query data within the allowed time range.
  # The default value of 0 does not set a limit.
  # CLI flag: -querier.max-query-lookback
  max_query_lookback: 0
  
  # Disable recording rules remote-write.
  #[ruler_remote_write_disabled: <boolean> | default = false]
  
  # The URL of the endpoint to send samples to.
  #[ruler_remote_write_url: <string>]
  
  # Timeout for requests to the remote write endpoint.
  #[ruler_remote_write_timeout: <duration>]
  
  # Custom HTTP headers to be sent along with each remote write request.
  # Be aware that headers that are set by Loki itself can't be overwritten.
  #[ruler_remote_write_headers: <headers>]
  
  # List of remote write relabel configurations.
  #[ruler_remote_write_relabel_configs: <relabel_config>]
  
  # Number of samples to buffer per shard before we block reading of more
  # samples from the WAL. It is recommended to have enough capacity in each
  # shard to buffer several requests to keep throughput up while processing
  # occasional slow remote requests.
  #[ruler_remote_write_queue_capacity: <int>]
  
  # Minimum number of shards, i.e. amount of concurrency.
  #[ruler_remote_write_queue_min_shards: <int>]
  
  # Maximum number of shards, i.e. amount of concurrency.
  #[ruler_remote_write_queue_max_shards: <int>]
  
  # Maximum number of samples per send.
  #[ruler_remote_write_queue_max_samples_per_send: <int>]
  
  # Maximum time a sample will wait in buffer.
  #[ruler_remote_write_queue_batch_send_deadline: <duration>]
  
  # Initial retry delay. Gets doubled for every retry.
  #[ruler_remote_write_queue_min_backoff: <duration>]
  
  # Maximum retry delay.
  #[ruler_remote_write_queue_max_backoff: <duration>]
  # Retry upon receiving a 429 status code from the remote-write storage.
  # This is experimental and might change in the future.
  #[ruler_remote_write_queue_retry_on_ratelimit: <boolean>]
  
  # Limit queries that can be sharded.
  # Queries within the time range of now and now minus this sharding lookback
  # are not sharded. The default value of 0s disables the lookback, causing
  # sharding of all queries at all times.
  # CLI flag: -frontend.min-sharding-lookback
  min_sharding_lookback: 0s
  
  # Split queries by an interval and execute in parallel, any value less than zero disables it.
  # This also determines how cache keys are chosen when result caching is enabled
  # CLI flag: -querier.split-queries-by-interval
  split_queries_by_interval: 30m
  
# Configuration for "runtime config" module, responsible for reloading runtime configuration file.
#[runtime_config: <runtime_config>]

# Configuration for tracing.
tracing:
  # Whether or not tracing should be enabled.
  # CLI flag: -tracing.enabled
  enabled: true
  
# Configuration for usage report
analytics:
  # By default, Loki will send anonymous, but uniquely-identifiable usage and configuration
  # analytics to Grafana Labs. These statistics are sent to https://stats.grafana.org/
  #
  # Statistics help us better understand how Loki is used, and they show us performance
  # levels for most users. This helps us prioritize features and documentation.
  # For more information on what's sent, look at
  # https://github.com/grafana/loki/blob/main/pkg/usagestats/stats.go
  # Refer to the buildReport method to see what goes into a report.
  #
  # When true, enables usage reporting.
  # CLI flag: -reporting.enabled
  reporting_enabled: false